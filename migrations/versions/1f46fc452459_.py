"""empty message

Revision ID: 1f46fc452459
Revises: 
Create Date: 2024-10-06 20:09:38.569971

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1f46fc452459'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('region',
    sa.Column('id_region', sa.Integer(), nullable=False),
    sa.Column('nombre_region', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id_region')
    )
    op.create_table('usuario',
    sa.Column('id_usuario', sa.String(length=10), nullable=False),
    sa.Column('correo', sa.String(length=50), nullable=False),
    sa.Column('clave', sa.String(length=128), nullable=False),
    sa.Column('tipo_usuario', sa.String(length=20), nullable=True),
    sa.Column('activo', sa.Boolean(), nullable=False),
    sa.Column('nombres', sa.String(length=100), nullable=False),
    sa.Column('apellidos', sa.String(length=100), nullable=False),
    sa.Column('telefono', sa.String(length=20), nullable=True),
    sa.Column('fecha_creacion', sa.DateTime(), nullable=False),
    sa.Column('imagen', sa.String(length=100), nullable=True),
    sa.Column('links_contacto', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id_usuario'),
    sa.UniqueConstraint('correo')
    )
    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.create_index('idx_usuario_correo', ['correo'], unique=False)

    op.create_table('ciudad',
    sa.Column('id_ciudad', sa.Integer(), nullable=False),
    sa.Column('nom_ciudad', sa.String(length=100), nullable=False),
    sa.Column('id_region', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_region'], ['region.id_region'], ),
    sa.PrimaryKeyConstraint('id_ciudad')
    )
    op.create_table('preferencia',
    sa.Column('id_preferencia', sa.String(length=10), nullable=False),
    sa.Column('area_total', sa.Float(), nullable=True),
    sa.Column('pisos', sa.Integer(), nullable=True),
    sa.Column('habitaciones', sa.Integer(), nullable=True),
    sa.Column('precio_uf', sa.Float(), nullable=True),
    sa.Column('estaciona', sa.Integer(), nullable=True),
    sa.Column('bodega', sa.Integer(), nullable=True),
    sa.Column('antiguedad', sa.Integer(), nullable=True),
    sa.Column('tipo_vivienda', sa.Integer(), nullable=True),
    sa.Column('condicion', sa.String(length=20), nullable=True),
    sa.Column('tipo_operacion', sa.Boolean(), nullable=True),
    sa.Column('banos', sa.Integer(), nullable=True),
    sa.Column('area_construida', sa.Float(), nullable=True),
    sa.Column('tipo_subsidio', sa.String(length=15), nullable=True),
    sa.Column('notificacion', sa.Boolean(), nullable=True),
    sa.Column('busqueda_automatica', sa.Boolean(), nullable=True),
    sa.Column('distancia', sa.Float(), nullable=True),
    sa.Column('contactado', sa.Boolean(), nullable=False),
    sa.Column('id_usuario', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id_usuario'], ),
    sa.PrimaryKeyConstraint('id_preferencia')
    )
    with op.batch_alter_table('preferencia', schema=None) as batch_op:
        batch_op.create_index('idx_preferencia_distancia', ['distancia'], unique=False)
        batch_op.create_index('idx_preferencia_id_usuario', ['id_usuario'], unique=False)

    op.create_table('comuna',
    sa.Column('id_comuna', sa.Integer(), nullable=False),
    sa.Column('nom_comuna', sa.String(length=100), nullable=False),
    sa.Column('id_ciudad', sa.Integer(), nullable=False),
    sa.Column('id_region', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_ciudad'], ['ciudad.id_ciudad'], ),
    sa.ForeignKeyConstraint(['id_region'], ['region.id_region'], ),
    sa.PrimaryKeyConstraint('id_comuna')
    )
    op.create_table('vecindario',
    sa.Column('id_vecindario', sa.Integer(), nullable=False),
    sa.Column('nom_vecindario', sa.String(length=100), nullable=False),
    sa.Column('id_comuna', sa.Integer(), nullable=False),
    sa.Column('id_ciudad', sa.Integer(), nullable=False),
    sa.Column('id_region', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_ciudad'], ['ciudad.id_ciudad'], ),
    sa.ForeignKeyConstraint(['id_comuna'], ['comuna.id_comuna'], ),
    sa.ForeignKeyConstraint(['id_region'], ['region.id_region'], ),
    sa.PrimaryKeyConstraint('id_vecindario')
    )
    op.create_table('vivienda',
    sa.Column('id_vivienda', sa.String(length=10), nullable=False),
    sa.Column('area_total', sa.Float(), nullable=True),
    sa.Column('pisos', sa.Integer(), nullable=True),
    sa.Column('habitaciones', sa.Integer(), nullable=True),
    sa.Column('precio_uf', sa.Float(), nullable=False),
    sa.Column('estaciona', sa.Integer(), nullable=True),
    sa.Column('bodega', sa.Integer(), nullable=True),
    sa.Column('antiguedad', sa.Integer(), nullable=True),
    sa.Column('tipo_vivienda', sa.Integer(), nullable=False),
    sa.Column('nombre_propiedad', sa.String(length=250), nullable=False),
    sa.Column('descripcion', sa.String(length=500), nullable=False),
    sa.Column('condicion', sa.String(length=10), nullable=True),
    sa.Column('tipo_operacion', sa.Boolean(), nullable=True),
    sa.Column('banos', sa.Integer(), nullable=True),
    sa.Column('area_construida', sa.Float(), nullable=True),
    sa.Column('latitud', sa.Float(), nullable=False),
    sa.Column('longitud', sa.Float(), nullable=False),
    sa.Column('ubicacion', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFROMEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('tipo_subsidio', sa.String(length=15), nullable=True),
    sa.Column('fecha_creacion', sa.DateTime(), nullable=False),
    sa.Column('links_contacto', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('id_vecindario', sa.Integer(), nullable=False),
    sa.Column('id_comuna', sa.Integer(), nullable=False),
    sa.Column('id_ciudad', sa.Integer(), nullable=False),
    sa.Column('id_region', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_ciudad'], ['ciudad.id_ciudad'], ),
    sa.ForeignKeyConstraint(['id_comuna'], ['comuna.id_comuna'], ),
    sa.ForeignKeyConstraint(['id_region'], ['region.id_region'], ),
    sa.ForeignKeyConstraint(['id_vecindario'], ['vecindario.id_vecindario'], ),
    sa.PrimaryKeyConstraint('id_vivienda')
    )
    with op.batch_alter_table('vivienda', schema=None) as batch_op:
        batch_op.create_index('idx_vivienda_id_vecindario', ['id_vecindario'], unique=False)

    op.create_table('favorito',
    sa.Column('id_favorito', sa.String(length=5), nullable=False),
    sa.Column('fecha_guardado', sa.DateTime(), nullable=False),
    sa.Column('id_usuario', sa.String(length=10), nullable=False),
    sa.Column('id_vivienda', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id_usuario'], ),
    sa.ForeignKeyConstraint(['id_vivienda'], ['vivienda.id_vivienda'], ),
    sa.PrimaryKeyConstraint('id_favorito')
    )
    with op.batch_alter_table('favorito', schema=None) as batch_op:
        batch_op.create_index('idx_favorito_id_usuario', ['id_usuario'], unique=False)
        batch_op.create_index('idx_favorito_id_vivienda', ['id_vivienda'], unique=False)

    op.create_table('imagen',
    sa.Column('id_imagen', sa.String(length=10), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('id_vivienda', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['id_vivienda'], ['vivienda.id_vivienda'], ),
    sa.PrimaryKeyConstraint('id_imagen')
    )
    op.create_table('match',
    sa.Column('id_match', sa.String(length=5), nullable=False),
    sa.Column('fecha_coincidencia', sa.DateTime(), nullable=False),
    sa.Column('visto', sa.Boolean(), nullable=False),
    sa.Column('id_usuario', sa.String(length=10), nullable=False),
    sa.Column('id_vivienda', sa.String(length=10), nullable=False),
    sa.ForeignKeyConstraint(['id_usuario'], ['usuario.id_usuario'], ),
    sa.ForeignKeyConstraint(['id_vivienda'], ['vivienda.id_vivienda'], ),
    sa.PrimaryKeyConstraint('id_match')
    )
    with op.batch_alter_table('match', schema=None) as batch_op:
        batch_op.create_index('idx_match_id_usuario', ['id_usuario'], unique=False)
        batch_op.create_index('idx_match_id_vivienda', ['id_vivienda'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('match', schema=None) as batch_op:
        batch_op.drop_index('idx_match_id_vivienda')
        batch_op.drop_index('idx_match_id_usuario')

    op.drop_table('match')
    op.drop_table('imagen')
    with op.batch_alter_table('favorito', schema=None) as batch_op:
        batch_op.drop_index('idx_favorito_id_vivienda')
        batch_op.drop_index('idx_favorito_id_usuario')

    op.drop_table('favorito')
    with op.batch_alter_table('vivienda', schema=None) as batch_op:
        batch_op.drop_index('idx_vivienda_ubicacion', postgresql_using='gist')
        batch_op.drop_index('idx_vivienda_id_vecindario')

    op.drop_table('vivienda')
    op.drop_table('vecindario')
    op.drop_table('comuna')
    with op.batch_alter_table('preferencia', schema=None) as batch_op:
        batch_op.drop_index('idx_preferencia_id_usuario')
        batch_op.drop_index('idx_preferencia_distancia')

    op.drop_table('preferencia')
    op.drop_table('ciudad')
    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.drop_index('idx_usuario_correo')

    op.drop_table('usuario')
    op.drop_table('region')
    # ### end Alembic commands ###
